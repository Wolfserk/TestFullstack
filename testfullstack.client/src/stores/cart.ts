import { defineStore } from "pinia";
import { ref, watch, computed } from "vue";
import { useUserStore } from "./user";
import axios from "axios";

export const useCartStore = defineStore("cart", () => {
  const userStore = useUserStore();
  const cart = ref<{ id: string; name: string; price: number; quantity: number }[]>([]);

  // üîπ –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getCartKey = () => `cart_${userStore.userId || "guest"}`;

  // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  const loadCart = () => {
    const storedCart = localStorage.getItem(getCartKey());
    cart.value = storedCart ? JSON.parse(storedCart) : [];
  };

  // üîπ –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ `localStorage`
  watch(cart, (newCart) => {
    localStorage.setItem(getCartKey(), JSON.stringify(newCart));
  }, { deep: true });

  // üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
  const addToCart = (item: { id: string; name: string; price: number }) => {
    const existingItem = cart.value.find(cartItem => cartItem.id === item.id);
    if (existingItem) {
      existingItem.quantity++;
    } else {
      cart.value.push({ ...item, quantity: 1 });
    }
  };

  // üîπ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  const removeFromCart = (itemId: string) => {
    cart.value = cart.value.filter(item => item.id !== itemId);
  };

  // üîπ –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
  const clearCart = () => {
    cart.value = [];
    localStorage.removeItem(getCartKey());
  };

  // üîπ –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ state –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ (–Ω–µ —É–¥–∞–ª—è—è –¥–∞–Ω–Ω—ã–µ)
  const logoutCart = () => {
    cart.value = [];
  };

  // üîπ –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
  const cartTotal = computed(() => cart.value.reduce((sum, item) => sum + item.quantity, 0));

  // üîπ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  const submitOrder = async () => {
    if (cart.value.length === 0) {
      alert("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!");
      return;
    }

    try {
      const response = await axios.post(
        "https://localhost:7034/api/orders",
        { items: cart.value.map(item => ({ itemId: item.id, quantity: item.quantity, price: item.price })) },
        { headers: { Authorization: `Bearer ${userStore.token}` } }
      );

      console.log("–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω:", response.data);
      clearCart();
      alert("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");

    } catch {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞!");
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.");
    }
  };

  return {
    cart,
    cartTotal,
    addToCart,
    removeFromCart,
    clearCart,
    loadCart,
    logoutCart,
    submitOrder
  };
});
