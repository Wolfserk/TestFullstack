import { defineStore } from "pinia";
import { ref, watch, computed } from "vue";
import { useUserStore } from "./user";
import axios from "axios";

export const useCartStore = defineStore("cart", () => {
  const userStore = useUserStore();
  const cart = ref<{ id: string; name: string; price: number; quantity: number }[]>([]);
  const discount = ref<number>(0);

  // üü¢ –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getCartKey = () => `cart_${userStore.userId || "guest"}`;

  // üü¢ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  const loadCart = () => {
    const storedCart = localStorage.getItem(getCartKey());
    cart.value = storedCart ? JSON.parse(storedCart) : [];
  };

  // üü¢ –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ `localStorage`
  watch(cart, () => {
    localStorage.setItem(getCartKey(), JSON.stringify(cart.value));
  }, { deep: true });

  // üü¢ –ü—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –∫–æ—Ä–∑–∏–Ω—É
  const switchUserCart = () => {
    cart.value = []; // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    loadCart(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∫–æ—Ä–∑–∏–Ω—É
  };

  // üü¢ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const fetchDiscount = async () => {
    if (!userStore.token) return;
    try {
      const { data } = await axios.get("https://localhost:7034/api/customers/discount", {
        headers: { Authorization: `Bearer ${userStore.token}` },
      });
      discount.value = data.discount || 0;
    } catch {
      discount.value = 0;
    }
  };

  // üü¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
  const addToCart = (item: { id: string; name: string; price: number }, quantity: number) => {
    const existingItem = cart.value.find(cartItem => cartItem.id === item.id);
    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      cart.value.push({ ...item, quantity });
    }
  };

  // üü¢ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  const removeFromCart = (itemId: string) => {
    cart.value = cart.value.filter(item => item.id !== itemId);
  };

  // üü¢ –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã —Ç–æ–ª—å–∫–æ –≤ state (–Ω–µ –≤ localStorage)
  const clearCart = () => {
    cart.value = [];
  };

  // üü¢ –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  const cartTotal = computed(() => cart.value.reduce((sum, item) => sum + item.quantity, 0));

  // üü¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
  const submitOrder = async () => {
    if (cart.value.length === 0) {
      alert("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!");
      return;
    }

    try {
      const itemIds = cart.value.map(item => item.id);
      const { data: updatedItems } = await axios.post(
        "https://localhost:7034/api/items/get-prices",
        { itemIds },
        { headers: { Authorization: `Bearer ${userStore.token}` } }
      );

      const updatedCart = cart.value.map(cartItem => {
        const serverItem = updatedItems.find((item: { id: string; }) => item.id === cartItem.id);
        if (!serverItem) throw new Error(`–¢–æ–≤–∞—Ä ${cartItem.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);

        return {
          itemId: cartItem.id,
          quantity: cartItem.quantity,
          price: discount.value > 0
            ? (serverItem.price * (1 - discount.value / 100)).toFixed(2)
            : serverItem.price.toFixed(2),
        };
      });

      await axios.post(
        "https://localhost:7034/api/orders",
        { items: updatedCart },
        { headers: { Authorization: `Bearer ${userStore.token}` } }
      );

      console.log("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
      clearCart();
      alert("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");

    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.");
    }
  };

  return {
    cart,
    cartTotal,
    discount,
    addToCart,
    removeFromCart,
    clearCart,
    loadCart,
    submitOrder,
    fetchDiscount,
    switchUserCart,
  };
});
